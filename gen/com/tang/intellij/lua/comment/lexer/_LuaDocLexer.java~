/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_GENERIC = 16;
  public static final int xCLASS_EXTEND = 18;
  public static final int xFIELD = 20;
  public static final int xFIELD_INDEX = 22;
  public static final int xFIELD_ID = 24;
  public static final int xGENERIC = 26;
  public static final int xALIAS = 28;
  public static final int xDOUBLE_QUOTED_STRING = 30;
  public static final int xSINGLE_QUOTED_STRING = 32;
  public static final int xMODULE = 34;
  public static final int xTAG_ENUMFIELD = 36;
  public static final int xTAG_DIAGNOSTIC = 38;
  public static final int xENUM = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 18, 18
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 25680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\12\37\1\40\1\41\1\42\1\37\1\43\1\44\2\37\31\1\1\45\126\1\1\46\1"+
    "\1\1\47\1\50\1\51\1\52\1\53\1\54\53\1\1\55\41\37\1\1\1\56\1\57\1\1\1\60\1"+
    "\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\1\1\71\1\72\1\73\1\74\1\75\1\76\1"+
    "\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\37\1\115\1\116\1\117\1\120\3\1\1\121\1\122\1\123\11\37\1\124\4\1"+
    "\1\125\17\37\2\1\1\126\41\37\2\1\1\127\1\130\2\37\1\131\1\132\27\1\1\133\4"+
    "\1\1\134\1\135\41\37\1\136\1\1\1\137\1\140\11\37\1\141\22\37\1\142\1\37\1"+
    "\143\1\144\1\37\1\145\1\146\1\147\1\150\2\37\1\151\4\37\1\152\1\153\1\154"+
    "\1\155\1\37\1\156\2\37\1\157\1\160\1\161\2\37\1\162\1\37\1\163\14\37\1\164"+
    "\4\37\246\1\1\165\20\1\1\166\1\167\25\1\1\170\34\1\1\171\14\37\2\1\1\172\5"+
    "\37\23\1\1\173\17\1\1\174\u0adc\37\1\175\1\176\u02fe\37");

  /* The ZZ_CMAP_Y table has 8128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\5\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1\33\1"+
    "\3\1\34\1\32\1\3\5\14\1\35\7\14\1\35\162\14\1\31\1\36\2\14\1\31\3\3\1\14\1"+
    "\37\1\3\1\40\4\3\34\0\1\14\1\41\1\36\1\42\1\3\1\32\1\35\1\41\4\14\1\42\24"+
    "\14\1\42\42\14\1\43\1\0\1\36\51\14\1\44\10\14\1\35\1\34\1\3\12\14\1\37\1\45"+
    "\1\46\12\0\1\47\1\50\1\47\2\3\6\14\1\35\1\45\1\35\3\3\1\0\1\51\1\45\1\3\2"+
    "\0\1\52\1\53\12\14\1\54\7\0\1\51\1\36\1\55\30\14\1\56\1\0\1\47\1\0\1\57\1"+
    "\60\1\61\2\0\1\61\1\62\3\3\1\63\1\64\7\14\6\0\1\52\1\44\25\14\1\65\2\0\1\66"+
    "\3\3\2\0\1\61\7\14\1\54\2\0\1\31\1\32\1\67\5\14\1\65\1\70\2\0\2\71\1\51\4"+
    "\3\6\14\1\71\1\3\2\14\1\35\1\3\6\14\1\44\1\35\1\51\1\3\2\0\12\14\1\65\16\0"+
    "\15\14\1\65\1\72\4\0\1\71\1\0\2\14\1\65\1\73\2\0\1\44\3\14\1\71\1\44\1\14"+
    "\2\62\5\14\1\41\1\14\1\40\1\36\1\31\1\72\1\0\2\74\1\75\1\3\1\63\1\3\1\42\1"+
    "\65\1\73\2\0\1\14\1\3\1\45\1\76\1\46\1\44\1\35\1\45\1\62\5\14\1\41\1\14\1"+
    "\41\1\77\1\31\1\60\1\52\1\63\1\74\1\51\1\33\1\3\1\44\1\40\1\3\1\73\2\0\1\61"+
    "\1\100\2\3\1\46\1\44\1\14\2\42\5\14\1\41\1\14\1\41\1\44\1\31\1\72\1\0\2\47"+
    "\1\51\1\37\3\3\1\65\1\73\2\0\1\34\1\3\1\56\1\0\1\46\1\44\1\14\2\62\5\14\1"+
    "\41\1\14\1\41\1\44\1\31\1\72\1\0\2\74\1\51\1\3\1\46\1\3\1\42\1\65\1\73\2\0"+
    "\1\34\3\3\1\101\1\44\1\35\1\36\1\41\1\31\1\77\1\41\1\45\1\37\1\35\1\36\2\14"+
    "\1\31\1\73\1\52\1\73\1\60\1\51\1\37\1\63\3\3\1\73\2\0\2\3\1\34\1\3\1\0\1\55"+
    "\1\14\2\41\5\14\1\41\3\14\1\31\1\72\1\0\2\60\1\51\1\3\1\50\1\35\1\34\1\65"+
    "\1\73\2\0\4\3\1\71\1\44\1\14\2\41\5\14\1\41\2\14\1\44\1\31\1\72\1\0\2\60\1"+
    "\51\1\3\1\50\1\3\1\77\1\65\1\73\2\0\1\102\3\3\1\0\2\14\2\41\11\14\1\54\1\72"+
    "\1\0\2\60\1\75\1\3\1\54\1\3\1\45\1\65\1\73\2\0\2\3\1\36\1\14\1\46\1\44\3\14"+
    "\1\35\1\36\5\14\1\42\2\14\1\34\1\14\1\35\1\103\1\63\1\0\1\104\2\0\1\3\1\73"+
    "\2\0\1\73\3\3\1\44\13\14\1\64\1\0\1\52\1\45\1\14\1\54\1\0\1\52\2\0\1\51\11"+
    "\3\1\77\1\41\1\35\6\14\1\105\2\14\1\64\2\0\1\66\1\14\1\40\1\0\1\52\2\0\1\51"+
    "\1\14\10\3\1\37\5\3\1\51\1\3\2\0\1\51\2\3\1\106\1\33\1\73\2\14\1\44\10\14"+
    "\1\37\1\46\4\0\1\60\1\14\1\71\2\0\1\46\10\0\1\53\1\3\1\103\16\3\12\14\1\54"+
    "\4\0\1\107\2\0\1\51\1\3\1\14\1\65\1\61\1\65\1\72\1\57\1\0\1\61\1\71\1\55\2"+
    "\14\1\65\2\0\1\70\3\0\1\51\11\14\1\42\1\3\1\34\12\14\1\35\23\14\1\41\1\31"+
    "\1\14\1\35\1\41\1\31\12\14\1\41\1\31\10\14\1\41\1\31\1\14\1\35\1\41\1\31\3"+
    "\14\1\35\16\14\1\41\1\31\20\14\1\35\1\46\10\3\4\14\4\3\25\14\1\31\1\14\1\31"+
    "\1\44\132\14\1\62\4\14\1\110\5\14\1\35\1\3\22\14\1\35\1\36\2\14\1\37\1\3\4"+
    "\14\1\65\1\51\1\3\1\45\4\14\1\65\1\53\2\3\4\14\1\65\3\3\3\14\1\41\1\111\3"+
    "\3\15\14\10\0\2\45\1\100\2\0\1\51\7\3\1\63\3\0\1\51\1\3\26\14\1\37\1\3\1\14"+
    "\1\112\10\14\1\113\1\3\21\14\1\31\2\3\7\14\1\35\3\0\1\3\3\0\2\3\1\73\2\0\7"+
    "\14\1\31\1\14\1\37\2\3\13\14\1\3\6\14\1\31\1\3\2\0\1\51\11\3\5\14\1\54\1\0"+
    "\1\3\15\14\1\71\1\0\1\52\7\0\1\74\2\0\1\51\1\3\2\0\1\51\2\3\1\45\2\3\3\0\1"+
    "\47\3\0\1\52\14\3\1\0\1\55\13\14\4\0\1\55\1\14\1\37\2\0\1\51\3\3\1\63\2\0"+
    "\3\3\1\107\7\14\1\71\2\0\1\61\2\0\1\61\12\14\1\65\3\0\3\3\11\14\5\0\2\3\2"+
    "\0\1\51\1\44\2\0\1\61\10\14\1\31\2\14\1\37\1\3\12\14\1\35\1\44\4\3\1\52\5"+
    "\0\1\55\1\64\1\14\1\57\1\75\1\3\60\14\20\0\5\14\1\31\1\14\1\31\11\14\1\31"+
    "\1\14\1\31\2\14\2\105\7\14\1\31\15\14\1\41\1\14\1\40\1\36\1\41\1\14\1\37\1"+
    "\14\1\36\1\14\1\3\3\14\1\37\1\36\1\41\1\14\1\37\2\114\1\115\1\0\6\3\1\116"+
    "\1\117\3\3\1\45\1\37\4\3\1\37\1\3\1\120\1\0\1\60\2\0\1\34\2\3\1\45\4\3\3\14"+
    "\1\37\10\14\1\37\3\3\3\0\1\53\1\33\1\46\2\0\1\53\3\3\1\32\1\45\1\36\2\14\1"+
    "\34\1\44\1\31\1\3\1\40\1\41\1\42\2\14\1\31\1\14\1\3\1\44\1\31\1\32\4\3\12"+
    "\14\1\37\135\3\71\14\1\37\1\45\1\54\1\61\3\3\11\14\1\42\1\3\1\34\16\14\1\3"+
    "\1\45\3\3\1\63\5\14\1\35\2\3\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14"+
    "\1\35\1\14\1\35\1\14\1\35\1\14\1\35\10\0\13\3\1\45\64\3\1\121\1\44\6\3\1\44"+
    "\1\14\1\65\1\0\1\44\1\31\1\14\1\37\1\44\24\14\1\35\1\50\2\44\25\14\1\35\1"+
    "\14\1\3\1\44\12\14\1\44\26\14\1\35\4\3\10\14\14\3\64\14\20\3\43\14\1\37\20"+
    "\3\13\14\1\31\3\14\1\37\4\14\2\0\1\61\5\3\13\14\1\54\1\3\2\0\1\122\7\14\1"+
    "\65\24\14\1\51\10\3\1\45\2\14\1\36\31\14\1\62\17\14\1\35\1\3\1\42\1\44\1\31"+
    "\5\3\1\36\3\14\2\123\1\54\5\14\1\54\1\0\1\3\1\53\2\3\1\37\1\3\15\14\3\3\1"+
    "\61\14\14\4\0\1\51\2\3\2\0\1\51\1\3\4\0\1\61\1\14\1\45\1\102\2\0\1\61\6\14"+
    "\1\65\1\0\1\51\5\14\1\54\3\0\3\3\7\14\1\37\1\0\13\14\1\54\3\0\1\53\2\3\1\45"+
    "\2\0\1\51\1\3\1\14\1\64\2\14\2\0\1\61\1\35\12\14\1\71\2\0\1\52\2\3\1\54\2"+
    "\14\1\51\2\0\1\51\1\3\5\14\1\35\1\124\1\61\14\14\1\72\1\57\1\55\1\65\1\113"+
    "\5\3\1\45\1\31\2\14\1\54\1\0\1\36\1\125\2\3\1\44\1\35\1\44\1\35\1\44\1\35"+
    "\2\3\1\14\1\35\1\14\1\35\12\14\1\35\3\14\1\31\1\3\34\14\1\54\1\0\1\52\1\51"+
    "\2\0\1\51\1\3\51\14\3\3\5\14\1\35\1\45\14\14\1\3\33\14\1\31\32\14\1\31\11"+
    "\3\1\14\1\35\2\3\1\45\1\14\1\3\1\126\2\14\1\41\2\14\1\35\1\14\1\40\1\42\1"+
    "\41\32\14\1\31\7\3\1\45\32\14\1\31\4\3\20\14\1\36\15\14\12\3\3\14\1\37\4\0"+
    "\4\3\4\0\1\45\1\37\5\3\1\44\6\3\1\34\1\3\1\14\1\41\41\14\1\127\1\3\1\37\2"+
    "\3\2\0\1\51\1\3\1\44\5\14\1\35\1\45\1\44\5\14\1\35\2\3\1\36\25\14\1\35\1\36"+
    "\1\14\1\36\1\14\1\36\1\14\1\36\1\37\1\31\1\77\4\3\1\46\1\3\3\14\1\44\5\14"+
    "\1\35\4\14\1\35\1\42\3\14\1\31\3\14\1\31\10\3\36\14\1\35\21\3\15\14\1\37\41"+
    "\3\1\33\40\3\7\14\1\37\14\14\1\37\3\3\1\53\7\3\10\14\3\3\1\44\6\14\1\35\1"+
    "\3\11\14\1\65\1\52\1\3\7\14\1\31\11\14\1\3\2\14\1\44\1\31\12\3\47\14\1\31"+
    "\2\0\1\51\1\3\11\14\1\3\11\14\1\3\12\14\2\3\15\14\3\3\2\14\1\35\3\14\1\35"+
    "\1\14\1\35\1\42\2\14\1\42\3\14\1\42\1\14\1\42\1\37\20\3\15\14\1\35\2\3\5\14"+
    "\1\31\2\3\2\14\6\3\1\14\1\42\12\14\1\41\1\14\1\35\21\3\1\14\1\31\1\41\12\14"+
    "\1\42\1\37\1\62\5\14\1\31\2\3\5\14\1\35\2\3\7\14\1\35\20\3\4\14\1\35\1\31"+
    "\2\3\5\14\1\31\2\3\6\14\1\31\21\3\16\14\1\3\1\36\20\3\1\71\1\50\1\3\1\0\1"+
    "\14\2\44\6\14\1\31\1\52\1\63\10\3\7\14\1\37\7\14\1\37\10\3\2\14\1\44\6\14"+
    "\1\125\6\3\15\14\1\31\2\3\5\14\1\31\2\3\4\14\1\35\3\3\4\14\1\31\33\3\22\14"+
    "\1\37\15\3\14\14\1\35\3\3\14\14\1\35\3\3\11\14\1\0\2\3\2\0\1\51\121\3\12\14"+
    "\1\43\1\53\1\31\22\3\1\46\7\14\1\37\1\3\1\45\2\3\5\14\1\65\2\0\1\53\7\3\4"+
    "\14\1\65\1\51\12\3\5\14\1\37\6\3\5\14\1\35\2\3\1\107\15\14\3\0\1\52\7\3\1"+
    "\73\2\0\1\57\1\66\1\3\1\63\1\107\13\14\2\0\1\52\1\33\1\103\2\3\1\33\6\14\1"+
    "\37\1\3\2\0\1\51\1\3\1\107\10\14\1\54\3\0\1\60\2\0\1\3\1\112\2\3\10\14\1\54"+
    "\1\32\2\3\1\107\13\14\1\54\3\0\1\55\1\37\1\46\1\60\2\0\1\75\1\37\10\3\4\14"+
    "\1\42\6\14\3\0\1\3\1\101\1\100\17\3\1\14\1\35\1\41\1\42\3\14\1\42\2\14\1\37"+
    "\1\3\13\14\1\54\2\0\1\52\1\3\2\0\1\51\1\3\1\0\1\44\1\14\2\62\5\14\1\41\1\14"+
    "\1\41\1\44\1\43\1\72\1\0\2\74\1\51\1\37\1\63\1\3\1\44\1\65\1\73\1\0\1\53\1"+
    "\0\1\53\42\3\15\14\1\71\3\0\1\107\1\35\1\3\2\0\1\51\1\101\1\31\7\3\14\14\5"+
    "\0\1\42\2\3\2\0\1\51\51\3\13\14\1\54\1\0\1\51\2\0\1\53\5\3\1\14\1\51\10\3"+
    "\14\14\4\0\1\53\1\37\2\3\2\0\1\51\11\3\12\14\1\54\3\0\1\37\1\3\2\0\1\51\15"+
    "\3\6\14\1\35\1\46\3\0\1\3\2\0\1\51\1\3\1\14\1\35\56\3\13\14\3\0\1\52\31\3"+
    "\20\14\2\0\1\51\4\3\1\45\1\14\1\35\1\34\2\14\1\77\6\14\1\0\1\47\1\74\1\107"+
    "\1\72\3\3\2\0\1\51\21\3\2\14\1\36\11\14\1\71\1\0\1\73\1\0\1\130\1\53\6\3\1"+
    "\71\1\0\1\107\11\14\1\54\1\0\1\70\1\52\1\3\1\63\2\3\1\71\2\0\13\14\1\65\3"+
    "\0\1\51\1\34\4\3\22\14\1\37\1\3\2\14\1\41\10\14\1\54\1\0\1\52\2\0\1\37\3\3"+
    "\2\0\1\51\5\3\1\36\7\14\1\73\5\0\1\46\2\0\1\52\22\3\1\14\1\35\1\42\11\14\1"+
    "\71\1\52\1\103\1\47\1\0\1\70\2\3\2\0\1\51\1\3\1\14\1\42\1\41\7\14\1\65\1\52"+
    "\1\47\1\0\1\37\1\3\2\0\1\51\115\3\4\14\1\54\1\52\2\3\1\70\3\14\1\41\10\14"+
    "\1\0\1\52\1\73\1\52\3\3\2\0\1\51\25\3\1\37\12\3\1\44\1\37\7\3\46\14\1\31\31"+
    "\3\33\14\1\35\4\3\61\14\123\3\30\14\1\37\3\3\14\14\4\0\1\55\1\54\3\0\1\51"+
    "\52\3\21\14\1\35\56\3\16\14\1\37\1\3\7\14\1\35\2\0\1\51\1\3\23\14\1\35\2\0"+
    "\1\51\1\3\7\14\1\31\1\0\1\53\2\3\14\14\1\0\1\52\2\3\1\14\3\3\2\0\1\51\1\3"+
    "\1\45\5\14\1\3\1\44\4\14\54\3\20\14\40\3\22\14\1\35\1\63\1\71\15\0\1\3\1\63"+
    "\1\107\3\14\20\3\1\42\1\53\2\3\1\51\3\3\76\14\2\3\65\14\1\31\12\3\2\14\1\37"+
    "\171\3\1\14\1\44\1\14\1\77\10\14\1\35\3\3\1\32\7\3\1\35\1\34\3\3\1\14\2\3"+
    "\143\14\1\3\32\14\1\35\1\3\3\14\1\37\2\14\1\37\1\3\2\14\1\31\1\50\1\0\27\3"+
    "\13\0\1\51\5\0\1\52\107\3\1\46\1\51\1\46\4\0\1\52\1\46\1\0\7\3\1\73\1\51\44"+
    "\3\1\73\1\53\56\3\25\14\1\41\21\14\1\41\1\32\1\77\1\44\1\41\2\14\1\42\1\44"+
    "\1\14\1\44\17\14\1\42\1\35\1\44\1\14\1\41\1\14\1\41\6\14\1\42\1\35\1\14\1"+
    "\40\1\36\1\14\1\41\124\14\1\31\6\14\1\41\5\14\1\35\7\14\1\35\6\14\1\41\7\14"+
    "\1\41\5\14\1\35\7\14\1\35\6\14\1\41\7\14\1\41\5\14\1\35\2\14\1\73\31\0\1\52"+
    "\1\63\14\0\1\53\1\3\1\33\3\3\1\53\4\3\1\63\1\0\1\46\3\0\24\3\7\14\1\35\1\3"+
    "\1\44\1\35\65\3\1\0\1\52\4\0\1\74\1\0\1\47\1\60\1\52\1\3\17\14\1\31\7\3\1"+
    "\63\34\3\13\14\1\37\1\0\1\107\1\14\1\31\2\0\1\51\1\32\120\3\7\14\1\131\4\3"+
    "\13\14\3\0\1\51\1\45\64\3\7\14\3\0\1\51\71\3\1\14\1\35\1\14\1\77\3\14\1\35"+
    "\61\14\1\37\2\3\1\0\1\52\12\3\21\14\1\0\1\107\1\3\2\0\1\51\125\3\1\37\23\3"+
    "\1\14\1\44\6\14\1\77\1\62\1\44\1\14\1\35\1\14\1\105\1\3\1\32\1\45\1\105\1"+
    "\44\1\77\1\62\2\105\1\77\1\62\1\35\1\14\1\35\1\14\1\44\1\40\2\14\1\42\4\14"+
    "\1\3\2\44\1\42\4\14\115\3\2\0\1\51\1\3\70\14\10\3\16\14\1\31\1\3\67\14\1\31"+
    "\140\14\1\31\3\3\114\14\1\37\7\3\7\14\1\31\70\3\22\14\1\35\1\3\130\14\24\3"+
    "\1\33\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 360 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\10\1\4\1\2\1\21\1\4\1\1\2\10\4\16\1\3\1\16\1\14\1\55\1\5\2\16\1\17\1\56"+
    "\1\57\1\10\1\16\1\47\1\11\1\7\1\16\6\12\1\46\1\16\1\50\1\16\1\51\1\54\1\13"+
    "\12\5\1\52\1\15\1\53\1\16\1\5\1\16\1\30\1\43\1\33\1\26\1\24\1\22\1\45\1\5"+
    "\1\23\1\5\1\44\1\25\1\32\1\35\1\40\1\27\1\5\1\31\1\34\1\36\1\37\1\42\2\5\1"+
    "\41\1\5\1\60\1\20\1\61\1\16\2\10\1\6\2\10\1\0\1\16\4\5\4\16\1\5\2\16\1\10"+
    "\3\16\1\5\2\16\3\5\3\16\3\5\3\16\1\5\1\16\1\5\1\16\1\5\1\16\4\5\1\16\3\5\1"+
    "\16\1\10\1\16\3\5\3\16\1\5\1\16\5\10\1\16\1\10\1\16\2\10\1\16\2\10\2\16\3"+
    "\10\1\16\1\10\3\16\3\5\2\10\3\5\1\16\1\5\3\10\2\5\2\10\1\16\4\10\3\5\2\16"+
    "\1\5\3\16\1\10\1\5\1\10\4\5\3\10\1\5\3\16\1\10\2\5\2\10\1\5\1\10\1\5\4\10"+
    "\1\5\2\10\2\16\3\10\2\16\3\10\1\5\1\16\1\5\1\16\1\10\2\16\2\5\1\16\1\5\1\10"+
    "\4\16\1\10\1\5\1\16\2\5\1\10\2\16\1\10\1\16\1\10\1\16\1\10\2\16\1\5\1\16\1"+
    "\5\1\16\1\10\1\16\4\10\1\5\1\0\4\5\1\16\2\10\1\5\2\10\2\5\1\10\1\5\1\16\7"+
    "\0\1\10\2\21\5\10\1\0\3\16\2\0\3\16\2\10\1\16\3\5\1\10\1\5\2\16\1\5\1\10\1"+
    "\5\2\10\2\16\1\5\1\10\2\5\2\16\2\10\1\5\1\16\3\5\1\10\1\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\14\0\1\2\2\0\1\3\2\4\1\5"+
    "\1\6\1\3\1\7\1\10\1\11\2\12\1\13\1\14"+
    "\1\15\1\16\21\17\1\1\1\5\1\20\1\6\1\21"+
    "\1\6\1\22\1\23\1\24\1\25\3\21\1\26\1\27"+
    "\1\30\1\31\1\6\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\20\1\45"+
    "\1\46\1\47\1\50\2\51\1\2\1\5\1\13\1\52"+
    "\23\17\2\0\3\21\1\53\3\20\1\51\2\0\16\17"+
    "\1\54\6\17\1\20\1\21\1\55\2\21\4\20\2\17"+
    "\1\56\15\17\1\57\3\17\2\21\4\20\1\60\3\17"+
    "\1\61\4\17\1\62\2\17\1\63\1\17\1\64\2\17"+
    "\1\65\1\21\4\20\6\17\1\66\1\67\3\17\1\70"+
    "\3\20\1\71\6\17\1\72\1\73\1\74\1\20\1\17"+
    "\1\75\2\17\1\20\1\17\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u03e8\0\u044c"+
    "\0\u03e8\0\u047e\0\u03e8\0\u03e8\0\u03e8\0\u04b0\0\u03e8\0\u04e2"+
    "\0\u03e8\0\u03e8\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u03e8\0\u03e8\0\u03e8\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u03e8\0\u03e8\0\u03e8\0\u03e8\0\u0a8c\0\u03e8\0\u03e8"+
    "\0\u03e8\0\u03e8\0\u03e8\0\u0abe\0\u03e8\0\u03e8\0\u03e8\0\u03e8"+
    "\0\u03e8\0\u0af0\0\u03e8\0\u03e8\0\u03e8\0\u03e8\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u047e\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u03e8\0\u10cc\0\u10fe\0\u1130"+
    "\0\u03e8\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u0546\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u03e8\0\u03e8\0\u0960\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u0546\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u0546\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u0546\0\u1b8a\0\u1bbc\0\u1bee\0\u0546"+
    "\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u0546\0\u1ce8\0\u1d1a\0\u0546"+
    "\0\u1d4c\0\u0546\0\u1d7e\0\u1db0\0\u0960\0\u1de2\0\u1e14\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u0546\0\u0546\0\u2008\0\u203a\0\u206c\0\u0960\0\u209e\0\u20d0"+
    "\0\u2102\0\u08fc\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u0546\0\u08fc\0\u08fc\0\u2260\0\u2292\0\u0546\0\u22c4\0\u22f6"+
    "\0\u2328\0\u235a\0\u08fc\0\u0546";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\2\30\1\25\1\31\2\25\1\32"+
    "\1\25\1\33\4\25\1\34\1\31\40\25\1\35\1\36"+
    "\1\37\2\30\1\40\5\35\1\41\6\35\24\40\7\35"+
    "\1\42\4\35\1\31\1\36\1\37\2\30\1\43\14\31"+
    "\24\43\14\31\1\35\1\36\1\37\2\30\1\44\14\35"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\4\44"+
    "\1\64\14\35\1\65\1\36\1\37\1\66\1\30\55\65"+
    "\1\31\1\36\1\37\2\30\1\67\1\31\1\70\12\31"+
    "\24\67\15\31\1\36\1\37\2\30\1\71\1\31\1\72"+
    "\2\31\1\73\1\41\1\74\2\31\1\75\1\76\1\31"+
    "\1\77\5\71\1\100\11\71\1\101\3\71\1\102\1\103"+
    "\1\104\1\105\1\106\1\31\1\107\1\41\1\110\1\111"+
    "\1\112\1\113\1\31\1\36\1\37\2\30\1\114\14\31"+
    "\24\114\2\31\1\115\12\31\1\36\1\37\2\30\1\40"+
    "\14\31\24\40\1\116\1\117\1\31\1\120\10\31\1\25"+
    "\1\36\1\37\2\30\41\25\1\121\13\25\1\31\1\36"+
    "\1\37\2\30\1\67\14\31\5\67\1\122\16\67\4\31"+
    "\1\123\10\31\1\36\1\37\2\30\1\40\4\31\1\73"+
    "\7\31\24\40\5\31\1\124\7\31\1\36\1\37\2\30"+
    "\1\67\14\31\24\67\4\31\1\125\7\31\1\126\1\36"+
    "\1\37\2\30\1\40\14\126\24\40\1\116\1\117\13\126"+
    "\1\36\1\37\2\30\1\67\14\126\24\67\14\126\14\31"+
    "\1\127\64\31\1\130\42\31\1\131\1\36\1\37\1\132"+
    "\1\30\1\133\14\131\24\133\14\131\1\31\1\36\1\37"+
    "\2\30\56\31\1\36\1\37\2\30\1\40\14\31\24\40"+
    "\1\116\1\117\12\31\64\0\1\27\62\0\2\30\66\0"+
    "\1\134\52\0\1\37\64\0\6\40\7\0\24\40\21\0"+
    "\6\43\7\0\24\43\21\0\6\44\7\0\24\44\21\0"+
    "\6\44\7\0\1\44\1\135\22\44\21\0\6\44\7\0"+
    "\13\44\1\136\10\44\21\0\6\44\7\0\13\44\1\137"+
    "\10\44\21\0\6\44\7\0\6\44\1\140\15\44\21\0"+
    "\6\44\7\0\1\44\1\141\22\44\21\0\6\44\7\0"+
    "\6\44\1\142\1\143\5\44\1\144\6\44\21\0\6\44"+
    "\7\0\3\44\1\145\20\44\21\0\6\44\7\0\2\44"+
    "\1\146\21\44\21\0\6\44\7\0\16\44\1\147\5\44"+
    "\21\0\6\44\7\0\3\44\1\150\20\44\21\0\6\44"+
    "\7\0\2\44\1\151\13\44\1\152\5\44\21\0\6\44"+
    "\7\0\6\44\1\153\15\44\21\0\6\44\7\0\17\44"+
    "\1\154\4\44\21\0\6\44\7\0\12\44\1\155\11\44"+
    "\21\0\6\44\7\0\20\44\1\156\3\44\21\0\6\44"+
    "\7\0\2\44\1\157\21\44\14\0\1\65\2\0\1\65"+
    "\1\0\56\65\2\0\1\66\1\30\55\65\5\0\6\67"+
    "\7\0\24\67\23\0\1\160\57\0\6\71\7\0\24\71"+
    "\23\0\1\161\64\0\1\73\54\0\6\71\7\0\15\71"+
    "\1\162\6\71\21\0\6\71\7\0\12\71\1\163\11\71"+
    "\21\0\6\71\7\0\6\71\1\164\15\71\67\0\1\165"+
    "\13\0\6\114\7\0\24\114\21\0\6\67\7\0\6\67"+
    "\1\166\1\167\5\67\1\170\6\67\14\0\14\127\1\171"+
    "\1\172\44\127\15\130\1\173\1\130\1\171\42\130\1\131"+
    "\2\0\1\131\1\0\56\131\2\0\1\132\1\30\56\131"+
    "\2\0\1\131\1\0\6\133\7\131\24\133\14\131\5\0"+
    "\6\44\7\0\2\44\1\174\21\44\21\0\6\44\7\0"+
    "\14\44\1\175\7\44\21\0\6\44\7\0\15\44\1\176"+
    "\6\44\21\0\6\44\7\0\13\44\1\177\10\44\21\0"+
    "\6\44\7\0\6\44\1\200\15\44\21\0\6\44\7\0"+
    "\7\44\1\201\1\44\1\202\12\44\21\0\6\44\7\0"+
    "\1\44\1\203\14\44\1\204\5\44\21\0\6\44\7\0"+
    "\21\44\1\205\2\44\21\0\6\44\7\0\1\44\1\206"+
    "\22\44\21\0\6\44\7\0\14\44\1\207\7\44\21\0"+
    "\6\44\7\0\4\44\1\210\17\44\21\0\6\44\7\0"+
    "\6\44\1\211\15\44\21\0\6\44\7\0\2\44\1\212"+
    "\21\44\21\0\6\44\7\0\15\44\1\213\6\44\21\0"+
    "\6\44\7\0\10\44\1\214\13\44\21\0\6\44\7\0"+
    "\5\44\1\215\16\44\21\0\6\44\7\0\1\44\1\216"+
    "\22\44\21\0\6\44\7\0\2\44\1\217\21\44\21\0"+
    "\6\44\7\0\13\44\1\220\10\44\23\0\1\221\61\0"+
    "\1\222\57\0\6\71\7\0\13\71\1\223\10\71\21\0"+
    "\6\71\7\0\17\71\1\224\4\71\21\0\6\71\7\0"+
    "\7\71\1\225\14\71\21\0\6\67\7\0\11\67\1\226"+
    "\12\67\21\0\6\67\7\0\1\67\1\227\14\67\1\230"+
    "\5\67\21\0\6\67\7\0\21\67\1\231\2\67\15\0"+
    "\2\127\2\0\1\127\1\0\12\127\1\0\40\127\1\0"+
    "\2\130\2\0\1\130\1\0\12\130\1\0\40\130\5\0"+
    "\6\44\7\0\3\44\1\232\20\44\21\0\6\44\7\0"+
    "\2\44\1\233\21\44\21\0\6\44\7\0\10\44\1\234"+
    "\13\44\21\0\6\44\7\0\23\44\1\235\21\0\6\44"+
    "\7\0\23\44\1\236\21\0\6\44\7\0\6\44\1\237"+
    "\15\44\21\0\6\44\7\0\22\44\1\240\1\44\21\0"+
    "\6\44\7\0\20\44\1\241\3\44\21\0\6\44\7\0"+
    "\14\44\1\242\7\44\21\0\6\44\7\0\3\44\1\243"+
    "\20\44\21\0\6\44\7\0\6\44\1\244\15\44\21\0"+
    "\6\44\7\0\15\44\1\245\6\44\21\0\6\44\7\0"+
    "\15\44\1\246\6\44\21\0\6\44\7\0\12\44\1\247"+
    "\11\44\21\0\6\44\7\0\7\44\1\250\14\44\21\0"+
    "\6\44\7\0\2\44\1\251\21\44\21\0\6\44\7\0"+
    "\2\44\1\252\21\44\21\0\6\44\7\0\13\44\1\253"+
    "\10\44\21\0\6\44\7\0\7\44\1\254\14\44\21\0"+
    "\6\44\7\0\2\44\1\255\21\44\21\0\6\71\7\0"+
    "\13\71\1\256\10\71\21\0\6\71\7\0\6\71\1\257"+
    "\15\71\21\0\6\67\7\0\22\67\1\260\1\67\21\0"+
    "\6\67\7\0\20\67\1\261\3\67\21\0\6\67\7\0"+
    "\14\67\1\262\7\67\21\0\6\67\7\0\3\67\1\263"+
    "\20\67\21\0\6\44\7\0\4\44\1\264\17\44\21\0"+
    "\6\44\7\0\7\44\1\265\14\44\21\0\6\44\7\0"+
    "\15\44\1\266\6\44\21\0\6\44\7\0\13\44\1\267"+
    "\10\44\21\0\6\44\7\0\10\44\1\270\13\44\21\0"+
    "\6\44\7\0\6\44\1\271\15\44\21\0\6\44\7\0"+
    "\6\44\1\272\15\44\21\0\6\44\7\0\2\44\1\273"+
    "\21\44\21\0\6\44\7\0\1\44\1\274\22\44\21\0"+
    "\6\44\7\0\12\44\1\275\11\44\21\0\6\44\7\0"+
    "\7\44\1\276\14\44\21\0\6\44\7\0\3\44\1\277"+
    "\20\44\21\0\6\44\7\0\12\44\1\300\11\44\21\0"+
    "\6\44\7\0\11\44\1\277\12\44\21\0\6\44\7\0"+
    "\12\44\1\301\11\44\21\0\6\44\7\0\23\44\1\302"+
    "\21\0\6\44\7\0\3\44\1\303\20\44\21\0\6\44"+
    "\7\0\7\44\1\304\14\44\21\0\6\71\7\0\11\71"+
    "\1\305\12\71\21\0\6\71\7\0\7\71\1\306\14\71"+
    "\21\0\6\67\7\0\6\67\1\307\15\67\21\0\6\67"+
    "\7\0\6\67\1\310\15\67\21\0\6\67\7\0\2\67"+
    "\1\311\21\67\21\0\6\67\7\0\1\67\1\312\22\67"+
    "\21\0\6\44\7\0\1\313\23\44\21\0\6\44\7\0"+
    "\6\44\1\314\15\44\21\0\6\44\7\0\16\44\1\315"+
    "\5\44\21\0\6\44\7\0\23\44\1\316\21\0\6\44"+
    "\7\0\14\44\1\317\7\44\21\0\6\44\7\0\11\44"+
    "\1\320\12\44\21\0\6\44\7\0\11\44\1\321\12\44"+
    "\21\0\6\44\7\0\13\44\1\252\10\44\21\0\6\44"+
    "\7\0\2\44\1\322\21\44\21\0\6\44\7\0\5\44"+
    "\1\323\16\44\21\0\6\44\7\0\16\44\1\324\5\44"+
    "\21\0\6\44\7\0\1\44\1\325\22\44\21\0\6\71"+
    "\7\0\23\71\1\326\21\0\6\67\7\0\23\67\1\327"+
    "\21\0\6\67\7\0\14\67\1\330\7\67\21\0\6\67"+
    "\7\0\11\67\1\331\12\67\21\0\6\67\7\0\11\67"+
    "\1\332\12\67\21\0\6\44\7\0\6\44\1\333\15\44"+
    "\21\0\6\44\7\0\23\44\1\334\21\0\6\44\7\0"+
    "\12\44\1\335\11\44\21\0\6\44\7\0\2\44\1\302"+
    "\21\44\21\0\6\44\7\0\2\44\1\321\21\44\21\0"+
    "\6\44\7\0\14\44\1\336\7\44\21\0\6\44\7\0"+
    "\6\44\1\337\15\44\21\0\6\44\7\0\6\44\1\340"+
    "\15\44\21\0\6\44\7\0\11\44\1\341\12\44\21\0"+
    "\6\67\7\0\2\67\1\342\21\67\21\0\6\67\7\0"+
    "\2\67\1\343\21\67\21\0\6\67\7\0\14\67\1\344"+
    "\7\67\21\0\6\44\7\0\11\44\1\345\12\44\21\0"+
    "\6\44\7\0\2\44\1\346\21\44\21\0\6\44\7\0"+
    "\14\44\1\347\7\44\21\0\6\44\7\0\2\44\1\350"+
    "\21\44\21\0\6\44\7\0\11\44\1\316\12\44\21\0"+
    "\6\44\7\0\4\44\1\252\17\44\21\0\6\67\7\0"+
    "\2\67\1\351\21\67\21\0\6\44\7\0\2\44\1\300"+
    "\21\44\21\0\6\44\7\0\1\44\1\352\22\44\21\0"+
    "\6\44\7\0\4\44\1\321\17\44\21\0\6\67\7\0"+
    "\4\67\1\353\17\67\21\0\6\44\7\0\11\44\1\354"+
    "\12\44\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\14\0\1\1\2\0\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\3\11\1\1\1\11\1\1\2\11"+
    "\31\1\3\11\3\1\4\11\1\1\5\11\1\1\5\11"+
    "\1\1\4\11\31\1\2\0\3\1\1\11\3\1\1\11"+
    "\2\0\25\1\2\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 64: break;
          case 2: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 3: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 66: break;
          case 4: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 5: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 70: break;
          case 8: 
            { yybegin(xTAG_ENUMFIELD); ;return OR;
            } 
            // fall through
          case 71: break;
          case 9: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 10: 
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 73: break;
          case 11: 
            { return ID;
            } 
            // fall through
          case 74: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 75: break;
          case 13: 
            { return SHARP;
            } 
            // fall through
          case 76: break;
          case 14: 
            { yybegin(xCOMMENT_STRING); return ID;
            } 
            // fall through
          case 77: break;
          case 15: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 78: break;
          case 16: 
            { beginType(); return ID;
            } 
            // fall through
          case 79: break;
          case 17: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            } 
            // fall through
          case 80: break;
          case 18: 
            { return NUMBER;
            } 
            // fall through
          case 81: break;
          case 19: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 82: break;
          case 20: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 83: break;
          case 21: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 84: break;
          case 22: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 85: break;
          case 23: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 86: break;
          case 24: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 87: break;
          case 25: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 88: break;
          case 26: 
            { return QUESTION;
            } 
            // fall through
          case 89: break;
          case 27: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 90: break;
          case 28: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 91: break;
          case 29: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 92: break;
          case 30: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 93: break;
          case 31: 
            { yybegin(xCLASS_EXTEND); return ID;
            } 
            // fall through
          case 94: break;
          case 32: 
            { yybegin(xCLASS_GENERIC); return LT;
            } 
            // fall through
          case 95: break;
          case 33: 
            { return EXTENDS;
            } 
            // fall through
          case 96: break;
          case 34: 
            { return COMMA;
            } 
            // fall through
          case 97: break;
          case 35: 
            { return GT;
            } 
            // fall through
          case 98: break;
          case 36: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 99: break;
          case 37: 
            { yybegin(xFIELD_ID); yypushback(yylength());
            } 
            // fall through
          case 100: break;
          case 38: 
            { yybegin(xFIELD_ID); return RBRACK;
            } 
            // fall through
          case 101: break;
          case 39: 
            { yybegin(xFIELD_INDEX); return LBRACK;
            } 
            // fall through
          case 102: break;
          case 40: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 103: break;
          case 41: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 104: break;
          case 42: 
            { return DASHES;
            } 
            // fall through
          case 105: break;
          case 43: 
            { _typeReq = false; return ARR;
            } 
            // fall through
          case 106: break;
          case 44: 
            { yybegin(xTAG); return TAG_NAME;
            } 
            // fall through
          case 107: break;
          case 45: 
            { return FUN;
            } 
            // fall through
          case 108: break;
          case 46: 
            { yybegin(xENUM); return TAG_NAME;
            } 
            // fall through
          case 109: break;
          case 47: 
            { beginType(); return TAG_NAME;
            } 
            // fall through
          case 110: break;
          case 48: 
            { yybegin(xFIELD); return TAG_NAME;
            } 
            // fall through
          case 111: break;
          case 49: 
            { yybegin(xPARAM); return TAG_NAME;
            } 
            // fall through
          case 112: break;
          case 50: 
            { yybegin(xALIAS); return TAG_NAME;
            } 
            // fall through
          case 113: break;
          case 51: 
            { yybegin(xCLASS); return TAG_NAME;
            } 
            // fall through
          case 114: break;
          case 52: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME;
            } 
            // fall through
          case 115: break;
          case 53: 
            { return ASYNC;
            } 
            // fall through
          case 116: break;
          case 54: 
            { return TAG_NAME;
            } 
            // fall through
          case 117: break;
          case 55: 
            { yybegin(xMODULE); return TAG_NAME;
            } 
            // fall through
          case 118: break;
          case 56: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 119: break;
          case 57: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 120: break;
          case 58: 
            { yybegin(xGENERIC); return TAG_NAME;
            } 
            // fall through
          case 121: break;
          case 59: 
            { yybegin(xFIELD_ID); return PACKAGE;
            } 
            // fall through
          case 122: break;
          case 60: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 123: break;
          case 61: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 124: break;
          case 62: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 125: break;
          case 63: 
            { yybegin(xTAG_DIAGNOSTIC); return TAG_NAME;
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

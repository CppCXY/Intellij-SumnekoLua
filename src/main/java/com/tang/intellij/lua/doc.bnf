/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tang.intellij.lua.comment.parser.LuaDocParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.tang.intellij.lua.comment.psi.LuaDocPsiElement"

  psiClassPrefix="LuaDoc"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.comment.psi"
  psiImplPackage="com.tang.intellij.lua.comment.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.comment.psi.LuaDocPsiImplUtilKt"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.comment.psi.LuaDocTypes"
  elementTypeClass="com.tang.intellij.lua.comment.psi.LuaDocElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinitionKt.createDocType"
  tokenTypeClass="com.tang.intellij.lua.comment.psi.LuaDocTokenType"
  extends(".*ty") = 'ty'

  tokens = [
        ID="regexp:[A-Za-z0-9_]+"
        AT = '@'
        SHARP = '#'
        EQ = '='
        COMMA = ','
        EXTENDS = ':'
        OR = '|'
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LCURLY = "{"
        RCURLY = "}"
        STRING_LITERAL = "STRING_LITERAL"
        ARR = '[]'
        FUN = 'fun'
        VARARG = 'vararg'
        PRIVATE = 'private'
        PROTECTED = 'protected'
        PUBLIC = 'public'
        DASHES = 'DASHES'
        STRING_BEGIN = 'STRING_BEGIN'
        STRING = 'STRING'
        TAG_NAME = 'TAG_NAME'
        TAG_NAME_LANGUAGE = 'language'
        NUMBER = 'regexp:[0-9]+'
        ASYNC = 'async'
        NULLABLE = '?'
        LBRACK = '['
        RBRACK = ']'
        PACKAGE = 'package'
  ]
  implements("tag.*") = [
    "com.tang.intellij.lua.comment.psi.LuaDocTag"
  ]
}

doc ::= (DASHES after_dash?)*

private after_dash ::= doc_item | STRING { recoverWhile=after_dash_recover }
private after_dash_recover ::= !(DASHES)
private doc_item ::= '@' (tag_normal|tag_lan)
tag_normal ::= TAG_NAME any* {
    pin = 1
    recoverWhile = after_dash_recover
}

tag_lan ::= TAG_NAME_LANGUAGE ID {
    pin = 1
    recoverWhile = after_dash_recover
}

any ::= ID | STRING | NUMBER | AT | SHARP | EQ | COMMA | EXTENDS | OR | GT | LT | LPAREN | RPAREN | LCURLY | RCURLY
| STRING_LITERAL | ARR | FUN | VARARG | PRIVATE | PROTECTED | PUBLIC | DASHES | STRING_BEGIN | TAG_NAME |
TAG_NAME_LANGUAGE | ASYNC | NULLABLE | LBRACK | RBRACK | PACKAGE
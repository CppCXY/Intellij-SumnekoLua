/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tang.intellij.lua.comment.parser.LuaDocParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.tang.intellij.lua.comment.psi.LuaDocPsiElement"

  psiClassPrefix="LuaDoc"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.comment.psi"
  psiImplPackage="com.tang.intellij.lua.comment.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.comment.psi.LuaDocPsiImplUtilKt"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.comment.psi.LuaDocTypes"
  elementTypeClass="com.tang.intellij.lua.comment.psi.LuaDocElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinitionKt.createDocType"
  tokenTypeClass="com.tang.intellij.lua.comment.psi.LuaDocTokenType"


  tokens = [
        ID="regexp:[A-Za-z0-9_]+"
        AT = '@'
        EQ = '='
        COMMA = ','
        EXTENDS = ':'
        OR = '|'
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LCURLY = "{"
        RCURLY = "}"
        STRING_LITERAL = "STRING_LITERAL"
        PRIVATE = 'private'
        PROTECTED = 'protected'
        PUBLIC = 'public'
        DASHES = 'DASHES'
        STRING_BEGIN = 'STRING_BEGIN'
        STRING = 'STRING'
        TAG_NAME_RETURN = 'return'
        TAG_NAME = 'TAG_NAME'
        TAG_NAME_PARAM = 'param'
        TAG_NAME_VARARG = 'vararg'
        TAG_NAME_PRIVATE = 'private'
        TAG_NAME_PROTECTED = 'protected'
        TAG_NAME_PUBLIC = 'public'
        TAG_NAME_CLASS = 'class'
        TAG_NAME_FIELD = 'field'
        TAG_NAME_TYPE = 'type'
        TAG_NAME_LANGUAGE = 'language'
        TAG_NAME_OVERLOAD = 'overload'
        TAG_NAME_MODULE = 'module'
        TAG_NAME_SEE = 'see'
        TAG_NAME_GENERIC = 'generic'
        TAG_NAME_ALIAS = 'alias'
        TAG_NAME_SUPPRESS = 'suppress'
  ]
  implements("tag.*") = [
    "com.tang.intellij.lua.comment.psi.LuaDocTag"
  ]
}

doc ::= (DASHES after_dash?)*

private after_dash ::= doc_item | STRING { recoverWhile=after_dash_recover }
private after_dash_recover ::= !(DASHES)
private doc_item ::= '@' (tag_param
    | tag_alias
    | tag_suppress
    | tag_vararg
    | tag_return
    | tag_class
    | tag_field
    | tag_type
    | tag_lan
    | tag_overload
    | tag_see
    | tag_def
    | access_modifier
    | tag_generic_list
    | tag_other)


access_modifier ::= PRIVATE | PUBLIC | PROTECTED | TAG_NAME_PRIVATE | TAG_NAME_PUBLIC | TAG_NAME_PROTECTED

tag_field ::= TAG_NAME_FIELD comment_string? {
    pin = 1
}

//--- tag
tag_def ::= TAG_NAME_NAME comment_string? {
    pin = 1
    methods = [
        tagName = 'TAG_NAME_NAME'
    ]
}

//@overload
tag_overload ::= TAG_NAME_OVERLOAD comment_string { pin = 1 }

//@language json
tag_lan ::= TAG_NAME_LANGUAGE ID comment_string? { pin = 1 }

//@param PARAM_NAME CLASS_REF

tag_param ::= TAG_NAME_PARAM comment_string? {
    pin = 1
}
tag_vararg ::= TAG_NAME_VARARG comment_string? {
    pin = 1
}


tag_return ::= TAG_NAME_RETURN comment_string? {
    pin = 1
}


tag_class ::= (TAG_NAME_CLASS|TAG_NAME_MODULE) comment_string? {
    pin = 2
}

// @type CLASS_REF
tag_type ::= TAG_NAME_TYPE comment_string? {
    pin = 1
}

comment_string ::= STRING_BEGIN? STRING? {
    //pin = 1
    methods = [
        string = "STRING"
    ]
}

tag_see ::= TAG_NAME_SEE comment_string? {
    pin = 1
}

generic_def ::= ID (EXTENDS class_name_ref)? {
    pin = 1
}

tag_generic_list ::= TAG_NAME_GENERIC generic_def (',' generic_def)* {
    pin = 1
}

tag_alias ::= TAG_NAME_ALIAS comment_string? {
    pin = 1
}

tag_suppress ::= TAG_NAME_SUPPRESS comment_string? {
    pin = 1
}

tag_other ::= TAG_NAME comment_string? {
    pin = 1
}
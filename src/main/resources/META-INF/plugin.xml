<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>com.cppcxy.Intellij-SumnekoLua</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>SumnekoLua</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="" url="">sumneko</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    Sumneko Lua Intellij port
    By CppCxy
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <fileType name="lua"
                  implementationClass="com.tang.intellij.lua.lang.LuaFileType"
                  fieldName="INSTANCE"
                  extensions="lua"
                  language="Lua"/>

        <lang.documentationProvider
                language="Lua"
                implementationClass="com.tang.intellij.lua.document.LuaDocumentationProvider"/>
        <lang.parserDefinition language="Lua" implementationClass="com.tang.intellij.lua.lang.LuaParserDefinition"/>
        <lang.syntaxHighlighterFactory
                language="Lua"
                implementationClass="com.tang.intellij.lua.highlighting.LuaSyntaxHighlighterFactory"/>
        <!--        usage-->
        <lang.findUsagesProvider language="Lua" implementationClass="com.tang.intellij.lua.usages.LuaFindUsagesProvider"/>
        <findUsagesHandlerFactory implementation="com.tang.intellij.lua.usages.LuaFindUsagesHandlerFactory"/>
        <usageTypeProvider implementation="com.tang.intellij.lua.usages.UsageTypeProvider"/>

        <!-- register a preloading activity. You need to init IntellijLanguageClient with your config, see readme -->
        <preloadingActivity implementation="com.cppcxy.intellij.sumnekolua.SumnekoPreloadingActivity" id="sumneko.proload"/>

        <!-- register intellijLanguageClient as a Service OR as a plugin component (see readme)... -->
        <applicationService serviceImplementation="org.wso2.lsp4intellij.IntellijLanguageClient"/>

        <!-- register a listener on editor events, required for lsp file sync -->
        <editorFactoryListener implementation="org.wso2.lsp4intellij.listeners.LSPEditorListener"/>
        <fileDocumentManagerListener implementation="org.wso2.lsp4intellij.listeners.LSPFileDocumentManagerListener"/>

        <!-- for displaying notifications by lsp -->
        <notificationGroup id="lsp" displayType="STICKY_BALLOON"/>

        <!-- for displaying the statusbar icon -->
        <statusBarWidgetFactory implementation="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"
                                id="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"
                                order="first" />

        <!-- needed for completion -->
        <completion.contributor language="Lua" implementationClass="org.wso2.lsp4intellij.contributors.LSPCompletionContributor"/>
        <!-- needed for completion as well as signature help -->
        <typedHandler implementation="org.wso2.lsp4intellij.listeners.LSPTypedHandler"
                      id="LSPTypedHandler"/>

        <formattingService implementation="com.tang.intellij.lua.editor.formatter.EmmyLuaCodeStyle"/>

        <!-- needed for code diagnostics -->
        <externalAnnotator id="LSPAnnotator" language="Lua"
                           implementationClass="org.wso2.lsp4intellij.contributors.annotator.LSPAnnotator"/>

        <!-- needed for Workspace Symbols -->
        <gotoSymbolContributor implementation="org.wso2.lsp4intellij.contributors.symbol.LSPSymbolContributor"
                               id="LSPSymbolContributor"/>

        <!-- needed for renaming -->
        <renameHandler implementation="org.wso2.lsp4intellij.contributors.rename.LSPRenameHandler" id="LSPRenameHandler" order="first"/>
        <renamePsiElementProcessor implementation="org.wso2.lsp4intellij.contributors.rename.LSPRenameProcessor" id="LSPRenameProcessor" order="first"/>

    </extensions>

    <actions>
        <!-- needed for hover -->
<!--        <action id="org.intellij.sdk.action.QuickDocAction" class="org.wso2.lsp4intellij.actions.LSPQuickDocAction">-->
<!--        </action>-->

        <!-- needed for find references -->
<!--        <action class="org.wso2.lsp4intellij.actions.LSPReferencesAction" id="LSPFindUsages">-->
<!--            <keyboard-shortcut first-keystroke="shift alt F7" keymap="$default"/>-->
<!--        </action>-->
    </actions>
    <applicationListeners>
        <!-- required for lsp file sync -->
        <listener class="org.wso2.lsp4intellij.listeners.VFSListener"
                  topic="com.intellij.openapi.vfs.VirtualFileListener"/>
        <listener class="org.wso2.lsp4intellij.listeners.LSPProjectManagerListener"
                  topic="com.intellij.openapi.project.ProjectManagerListener"/>
    </applicationListeners>

</idea-plugin>